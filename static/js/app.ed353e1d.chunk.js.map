{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","useEffect","loadToDos","saveToDos","toSave","a","async","AsyncStorage","setItem","JSON","stringify","getItem","s","console","log","parse","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","fontSize","fontWeight","color","TextInput","onSubmitEditing","newToDos","Date","now","onChangeText","payload","returnKeyType","value","placeholder","input","ScrollView","Object","keys","map","key","toDo","toDoText","Platform","OS","confirm","Alert","alert","deleteToDo","Fontisto","name","size","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","btnText","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems"],"mappings":"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","file":"static/js/app.ed353e1d.chunk.js","sourcesContent":["export const theme = {\r\n    bg: \"black\",\r\n    grey: \"#3A3D40\",\r\n    toDoBg: \"#5C5C60\",\r\n};","import { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  Alert,\n  ScrollView,\n  Platform,\n} from \"react-native\";\nimport { Fontisto } from \"@expo/vector-icons\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { theme } from \"./colors\";\n\nconst STORAGE_KEY = \"@toDos\";\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n  useEffect(() => {\n    loadToDos();\n  }, []);\n  const travel = () => setWorking(false);\n  const work = () => setWorking(true);\n  const onChangeText = (payload) => setText(payload);\n\n  const saveToDos = async (toSave) => {\n    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n  };\n  const loadToDos = async () => {\n    const s = await AsyncStorage.getItem(STORAGE_KEY);\n    console.log(JSON.parse(s));\n    if (s) {\n      setToDos(JSON.parse(s));\n    }\n\n  };\n\n  const addToDo = async () => {\n    if (text === \"\") {\n      return;\n    }\n    const newToDos = {\n      ...toDos,\n      [Date.now()]: { text, working },\n    };\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    setText(\"\");\n  };\n  const deleteToDo = (key) => {\n    if (Platform.OS === 'web') {\n      const ok = confirm(\"정말 삭제하시겠습니까?\");\n      if (ok) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        saveToDos(newToDos);\n      }\n\n    } else {\n      Alert.alert(\"Delete To Do\", \"Are you sure?\", [\n        { text: \"Cancel\" },\n        {\n          text: \"I'm Sure\",\n          style: \"destructive\",\n          onPress: () => {\n            const newToDos = { ...toDos };\n            delete newToDos[key];\n            setToDos(newToDos);\n            saveToDos(newToDos);\n          },\n        },\n      ]);\n\n    }\n\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text\n            style={{ fontSize: 38, fontWeight: \"600\", color: working ? \"white\" : theme.grey }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text\n            style={{\n              fontSize: 38, fontWeight: \"600\",\n              color: !working ? \"white\" : theme.grey,\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <TextInput\n        onSubmitEditing={addToDo}\n        onChangeText={onChangeText}\n        returnKeyType=\"done\"\n        value={text}\n        placeholder={working ? \"Add a To Do\" : \"Where do you want to go?\"}\n        style={styles.input}\n      />\n      <ScrollView>\n        {Object.keys(toDos).map((key) => (\n          <View style={styles.toDo} key={key}>\n            <Text style={styles.toDoText}>{toDos[key].text}</Text>\n            <TouchableOpacity onPress={() => deleteToDo(key)}>\n              <Fontisto name=\"trash\" size={18} color={theme.grey} />\n            </TouchableOpacity>\n          </View>\n        ))}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  btnText: {\n    fontSize: 38, fontWeight: \"600\",\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  toDo: {\n    backgroundColor: theme.toDoBg,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  toDoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"500\",\n  },\n});\n"],"sourceRoot":""}